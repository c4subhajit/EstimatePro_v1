'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.4927
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("Report_PondEstDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class Report_PondEstDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableEstimate_pond As Estimate_pondDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Estimate_pond")) Is Nothing) Then
                MyBase.Tables.Add(New Estimate_pondDataTable(ds.Tables("Estimate_pond")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Estimate_pond() As Estimate_pondDataTable
        Get
            Return Me.tableEstimate_pond
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As Report_PondEstDataSet = CType(MyBase.Clone,Report_PondEstDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Estimate_pond")) Is Nothing) Then
                MyBase.Tables.Add(New Estimate_pondDataTable(ds.Tables("Estimate_pond")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableEstimate_pond = CType(MyBase.Tables("Estimate_pond"),Estimate_pondDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEstimate_pond) Is Nothing) Then
                Me.tableEstimate_pond.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "Report_PondEstDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Report_PondEstDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableEstimate_pond = New Estimate_pondDataTable
        MyBase.Tables.Add(Me.tableEstimate_pond)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEstimate_pond() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As Report_PondEstDataSet = New Report_PondEstDataSet
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub Estimate_pondRowChangeEventHandler(ByVal sender As Object, ByVal e As Estimate_pondRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Estimate_pondDataTable
        Inherits Global.System.Data.TypedTableBase(Of Estimate_pondRow)
        
        Private columnrefNo As Global.System.Data.DataColumn
        
        Private columnnameWork As Global.System.Data.DataColumn
        
        Private columnnameBen As Global.System.Data.DataColumn
        
        Private columnlocationWork As Global.System.Data.DataColumn
        
        Private columnnameIO As Global.System.Data.DataColumn
        
        Private columnnameSO As Global.System.Data.DataColumn
        
        Private columnnameEE As Global.System.Data.DataColumn
        
        Private columndurWork As Global.System.Data.DataColumn
        
        Private columntb As Global.System.Data.DataColumn
        
        Private columnbb As Global.System.Data.DataColumn
        
        Private columntl As Global.System.Data.DataColumn
        
        Private columnbl As Global.System.Data.DataColumn
        
        Private columndp As Global.System.Data.DataColumn
        
        Private columnslope As Global.System.Data.DataColumn
        
        Private columnvol As Global.System.Data.DataColumn
        
        Private columnunit As Global.System.Data.DataColumn
        
        Private columnestCost As Global.System.Data.DataColumn
        
        Private columndispCost As Global.System.Data.DataColumn
        
        Private columncontRate As Global.System.Data.DataColumn
        
        Private columncontCost As Global.System.Data.DataColumn
        
        Private columntotEstCost As Global.System.Data.DataColumn
        
        Private columndateEst As Global.System.Data.DataColumn
        
        Private columnfinYear As Global.System.Data.DataColumn
        
        Private columntotRateRef As Global.System.Data.DataColumn
        
        Private columnrefno1 As Global.System.Data.DataColumn
        
        Private columnrefno2 As Global.System.Data.DataColumn
        
        Private columnrefno3 As Global.System.Data.DataColumn
        
        Private columnrefno4 As Global.System.Data.DataColumn
        
        Private columnrefno5 As Global.System.Data.DataColumn
        
        Private columnqty1 As Global.System.Data.DataColumn
        
        Private columnqty2 As Global.System.Data.DataColumn
        
        Private columnqty3 As Global.System.Data.DataColumn
        
        Private columnqty4 As Global.System.Data.DataColumn
        
        Private columnqty5 As Global.System.Data.DataColumn
        
        Private columnrefNoEst As Global.System.Data.DataColumn
        
        Private columnref1des As Global.System.Data.DataColumn
        
        Private columnref1unit As Global.System.Data.DataColumn
        
        Private columnref1rate As Global.System.Data.DataColumn
        
        Private columnref1amt As Global.System.Data.DataColumn
        
        Private columnref2des As Global.System.Data.DataColumn
        
        Private columnref2unit As Global.System.Data.DataColumn
        
        Private columnref2rate As Global.System.Data.DataColumn
        
        Private columnref2amt As Global.System.Data.DataColumn
        
        Private columnref3des As Global.System.Data.DataColumn
        
        Private columnref3unit As Global.System.Data.DataColumn
        
        Private columnref3rate As Global.System.Data.DataColumn
        
        Private columnref3amt As Global.System.Data.DataColumn
        
        Private columnref4des As Global.System.Data.DataColumn
        
        Private columnref4unit As Global.System.Data.DataColumn
        
        Private columnref4rate As Global.System.Data.DataColumn
        
        Private columnref4amt As Global.System.Data.DataColumn
        
        Private columnref5des As Global.System.Data.DataColumn
        
        Private columnref5unit As Global.System.Data.DataColumn
        
        Private columnref5rate As Global.System.Data.DataColumn
        
        Private columnref5amt As Global.System.Data.DataColumn
        
        Private columnprog_Name As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Estimate_pond"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property refNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrefNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nameWorkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnameWork
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nameBenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnameBen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property locationWorkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlocationWork
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nameIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnameIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nameSOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnameSO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nameEEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnameEE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property durWorkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndurWork
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tbColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntb
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property bbColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbb
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property blColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property slopeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnslope
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property volColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvol
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property estCostColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnestCost
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dispCostColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndispCost
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property contRateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncontRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property contCostColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncontCost
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property totEstCostColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntotEstCost
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dateEstColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndateEst
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property finYearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfinYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property totRateRefColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntotRateRef
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property refno1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnrefno1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property refno2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnrefno2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property refno3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnrefno3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property refno4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnrefno4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property refno5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnrefno5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property qty1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnqty1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property qty2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnqty2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property qty3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnqty3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property qty4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnqty4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property qty5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnqty5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property refNoEstColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrefNoEst
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ref1desColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnref1des
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ref1unitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnref1unit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ref1rateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnref1rate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ref1amtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnref1amt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ref2desColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnref2des
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ref2unitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnref2unit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ref2rateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnref2rate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ref2amtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnref2amt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ref3desColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnref3des
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ref3unitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnref3unit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ref3rateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnref3rate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ref3amtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnref3amt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ref4desColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnref4des
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ref4unitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnref4unit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ref4rateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnref4rate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ref4amtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnref4amt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ref5desColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnref5des
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ref5unitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnref5unit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ref5rateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnref5rate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ref5amtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnref5amt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prog_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprog_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Estimate_pondRow
            Get
                Return CType(Me.Rows(index),Estimate_pondRow)
            End Get
        End Property
        
        Public Event Estimate_pondRowChanging As Estimate_pondRowChangeEventHandler
        
        Public Event Estimate_pondRowChanged As Estimate_pondRowChangeEventHandler
        
        Public Event Estimate_pondRowDeleting As Estimate_pondRowChangeEventHandler
        
        Public Event Estimate_pondRowDeleted As Estimate_pondRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEstimate_pondRow(ByVal row As Estimate_pondRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEstimate_pondRow( _
                    ByVal refNo As String,  _
                    ByVal nameWork As String,  _
                    ByVal nameBen As String,  _
                    ByVal locationWork As String,  _
                    ByVal nameIO As String,  _
                    ByVal nameSO As String,  _
                    ByVal nameEE As String,  _
                    ByVal durWork As String,  _
                    ByVal tb As Decimal,  _
                    ByVal bb As Decimal,  _
                    ByVal tl As Decimal,  _
                    ByVal bl As Decimal,  _
                    ByVal dp As Decimal,  _
                    ByVal slope As String,  _
                    ByVal vol As Decimal,  _
                    ByVal unit As String,  _
                    ByVal estCost As Decimal,  _
                    ByVal dispCost As Decimal,  _
                    ByVal contRate As Decimal,  _
                    ByVal contCost As Decimal,  _
                    ByVal totEstCost As Decimal,  _
                    ByVal dateEst As String,  _
                    ByVal finYear As String,  _
                    ByVal totRateRef As Decimal,  _
                    ByVal refno1 As String,  _
                    ByVal refno2 As String,  _
                    ByVal refno3 As String,  _
                    ByVal refno4 As String,  _
                    ByVal refno5 As String,  _
                    ByVal qty1 As Decimal,  _
                    ByVal qty2 As Decimal,  _
                    ByVal qty3 As Decimal,  _
                    ByVal qty4 As Decimal,  _
                    ByVal qty5 As Decimal,  _
                    ByVal refNoEst As String,  _
                    ByVal ref1des As String,  _
                    ByVal ref1unit As String,  _
                    ByVal ref1rate As Decimal,  _
                    ByVal ref1amt As Decimal,  _
                    ByVal ref2des As String,  _
                    ByVal ref2unit As String,  _
                    ByVal ref2rate As Decimal,  _
                    ByVal ref2amt As Decimal,  _
                    ByVal ref3des As String,  _
                    ByVal ref3unit As String,  _
                    ByVal ref3rate As Decimal,  _
                    ByVal ref3amt As Decimal,  _
                    ByVal ref4des As String,  _
                    ByVal ref4unit As String,  _
                    ByVal ref4rate As Decimal,  _
                    ByVal ref4amt As Decimal,  _
                    ByVal ref5des As String,  _
                    ByVal ref5unit As String,  _
                    ByVal ref5rate As Decimal,  _
                    ByVal ref5amt As Decimal,  _
                    ByVal prog_Name As String) As Estimate_pondRow
            Dim rowEstimate_pondRow As Estimate_pondRow = CType(Me.NewRow,Estimate_pondRow)
            Dim columnValuesArray() As Object = New Object() {refNo, nameWork, nameBen, locationWork, nameIO, nameSO, nameEE, durWork, tb, bb, tl, bl, dp, slope, vol, unit, estCost, dispCost, contRate, contCost, totEstCost, dateEst, finYear, totRateRef, refno1, refno2, refno3, refno4, refno5, qty1, qty2, qty3, qty4, qty5, refNoEst, ref1des, ref1unit, ref1rate, ref1amt, ref2des, ref2unit, ref2rate, ref2amt, ref3des, ref3unit, ref3rate, ref3amt, ref4des, ref4unit, ref4rate, ref4amt, ref5des, ref5unit, ref5rate, ref5amt, prog_Name}
            rowEstimate_pondRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEstimate_pondRow)
            Return rowEstimate_pondRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByrefNo(ByVal refNo As String) As Estimate_pondRow
            Return CType(Me.Rows.Find(New Object() {refNo}),Estimate_pondRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Estimate_pondDataTable = CType(MyBase.Clone,Estimate_pondDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Estimate_pondDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnrefNo = MyBase.Columns("refNo")
            Me.columnnameWork = MyBase.Columns("nameWork")
            Me.columnnameBen = MyBase.Columns("nameBen")
            Me.columnlocationWork = MyBase.Columns("locationWork")
            Me.columnnameIO = MyBase.Columns("nameIO")
            Me.columnnameSO = MyBase.Columns("nameSO")
            Me.columnnameEE = MyBase.Columns("nameEE")
            Me.columndurWork = MyBase.Columns("durWork")
            Me.columntb = MyBase.Columns("tb")
            Me.columnbb = MyBase.Columns("bb")
            Me.columntl = MyBase.Columns("tl")
            Me.columnbl = MyBase.Columns("bl")
            Me.columndp = MyBase.Columns("dp")
            Me.columnslope = MyBase.Columns("slope")
            Me.columnvol = MyBase.Columns("vol")
            Me.columnunit = MyBase.Columns("unit")
            Me.columnestCost = MyBase.Columns("estCost")
            Me.columndispCost = MyBase.Columns("dispCost")
            Me.columncontRate = MyBase.Columns("contRate")
            Me.columncontCost = MyBase.Columns("contCost")
            Me.columntotEstCost = MyBase.Columns("totEstCost")
            Me.columndateEst = MyBase.Columns("dateEst")
            Me.columnfinYear = MyBase.Columns("finYear")
            Me.columntotRateRef = MyBase.Columns("totRateRef")
            Me.columnrefno1 = MyBase.Columns("refno1")
            Me.columnrefno2 = MyBase.Columns("refno2")
            Me.columnrefno3 = MyBase.Columns("refno3")
            Me.columnrefno4 = MyBase.Columns("refno4")
            Me.columnrefno5 = MyBase.Columns("refno5")
            Me.columnqty1 = MyBase.Columns("qty1")
            Me.columnqty2 = MyBase.Columns("qty2")
            Me.columnqty3 = MyBase.Columns("qty3")
            Me.columnqty4 = MyBase.Columns("qty4")
            Me.columnqty5 = MyBase.Columns("qty5")
            Me.columnrefNoEst = MyBase.Columns("refNoEst")
            Me.columnref1des = MyBase.Columns("ref1des")
            Me.columnref1unit = MyBase.Columns("ref1unit")
            Me.columnref1rate = MyBase.Columns("ref1rate")
            Me.columnref1amt = MyBase.Columns("ref1amt")
            Me.columnref2des = MyBase.Columns("ref2des")
            Me.columnref2unit = MyBase.Columns("ref2unit")
            Me.columnref2rate = MyBase.Columns("ref2rate")
            Me.columnref2amt = MyBase.Columns("ref2amt")
            Me.columnref3des = MyBase.Columns("ref3des")
            Me.columnref3unit = MyBase.Columns("ref3unit")
            Me.columnref3rate = MyBase.Columns("ref3rate")
            Me.columnref3amt = MyBase.Columns("ref3amt")
            Me.columnref4des = MyBase.Columns("ref4des")
            Me.columnref4unit = MyBase.Columns("ref4unit")
            Me.columnref4rate = MyBase.Columns("ref4rate")
            Me.columnref4amt = MyBase.Columns("ref4amt")
            Me.columnref5des = MyBase.Columns("ref5des")
            Me.columnref5unit = MyBase.Columns("ref5unit")
            Me.columnref5rate = MyBase.Columns("ref5rate")
            Me.columnref5amt = MyBase.Columns("ref5amt")
            Me.columnprog_Name = MyBase.Columns("prog_Name")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnrefNo = New Global.System.Data.DataColumn("refNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrefNo)
            Me.columnnameWork = New Global.System.Data.DataColumn("nameWork", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnameWork)
            Me.columnnameBen = New Global.System.Data.DataColumn("nameBen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnameBen)
            Me.columnlocationWork = New Global.System.Data.DataColumn("locationWork", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlocationWork)
            Me.columnnameIO = New Global.System.Data.DataColumn("nameIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnameIO)
            Me.columnnameSO = New Global.System.Data.DataColumn("nameSO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnameSO)
            Me.columnnameEE = New Global.System.Data.DataColumn("nameEE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnameEE)
            Me.columndurWork = New Global.System.Data.DataColumn("durWork", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndurWork)
            Me.columntb = New Global.System.Data.DataColumn("tb", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntb)
            Me.columnbb = New Global.System.Data.DataColumn("bb", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbb)
            Me.columntl = New Global.System.Data.DataColumn("tl", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntl)
            Me.columnbl = New Global.System.Data.DataColumn("bl", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbl)
            Me.columndp = New Global.System.Data.DataColumn("dp", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndp)
            Me.columnslope = New Global.System.Data.DataColumn("slope", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnslope)
            Me.columnvol = New Global.System.Data.DataColumn("vol", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvol)
            Me.columnunit = New Global.System.Data.DataColumn("unit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunit)
            Me.columnestCost = New Global.System.Data.DataColumn("estCost", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnestCost)
            Me.columndispCost = New Global.System.Data.DataColumn("dispCost", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndispCost)
            Me.columncontRate = New Global.System.Data.DataColumn("contRate", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncontRate)
            Me.columncontCost = New Global.System.Data.DataColumn("contCost", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncontCost)
            Me.columntotEstCost = New Global.System.Data.DataColumn("totEstCost", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntotEstCost)
            Me.columndateEst = New Global.System.Data.DataColumn("dateEst", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndateEst)
            Me.columnfinYear = New Global.System.Data.DataColumn("finYear", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfinYear)
            Me.columntotRateRef = New Global.System.Data.DataColumn("totRateRef", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntotRateRef)
            Me.columnrefno1 = New Global.System.Data.DataColumn("refno1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrefno1)
            Me.columnrefno2 = New Global.System.Data.DataColumn("refno2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrefno2)
            Me.columnrefno3 = New Global.System.Data.DataColumn("refno3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrefno3)
            Me.columnrefno4 = New Global.System.Data.DataColumn("refno4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrefno4)
            Me.columnrefno5 = New Global.System.Data.DataColumn("refno5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrefno5)
            Me.columnqty1 = New Global.System.Data.DataColumn("qty1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqty1)
            Me.columnqty2 = New Global.System.Data.DataColumn("qty2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqty2)
            Me.columnqty3 = New Global.System.Data.DataColumn("qty3", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqty3)
            Me.columnqty4 = New Global.System.Data.DataColumn("qty4", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqty4)
            Me.columnqty5 = New Global.System.Data.DataColumn("qty5", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqty5)
            Me.columnrefNoEst = New Global.System.Data.DataColumn("refNoEst", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrefNoEst)
            Me.columnref1des = New Global.System.Data.DataColumn("ref1des", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnref1des)
            Me.columnref1unit = New Global.System.Data.DataColumn("ref1unit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnref1unit)
            Me.columnref1rate = New Global.System.Data.DataColumn("ref1rate", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnref1rate)
            Me.columnref1amt = New Global.System.Data.DataColumn("ref1amt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnref1amt)
            Me.columnref2des = New Global.System.Data.DataColumn("ref2des", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnref2des)
            Me.columnref2unit = New Global.System.Data.DataColumn("ref2unit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnref2unit)
            Me.columnref2rate = New Global.System.Data.DataColumn("ref2rate", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnref2rate)
            Me.columnref2amt = New Global.System.Data.DataColumn("ref2amt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnref2amt)
            Me.columnref3des = New Global.System.Data.DataColumn("ref3des", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnref3des)
            Me.columnref3unit = New Global.System.Data.DataColumn("ref3unit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnref3unit)
            Me.columnref3rate = New Global.System.Data.DataColumn("ref3rate", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnref3rate)
            Me.columnref3amt = New Global.System.Data.DataColumn("ref3amt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnref3amt)
            Me.columnref4des = New Global.System.Data.DataColumn("ref4des", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnref4des)
            Me.columnref4unit = New Global.System.Data.DataColumn("ref4unit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnref4unit)
            Me.columnref4rate = New Global.System.Data.DataColumn("ref4rate", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnref4rate)
            Me.columnref4amt = New Global.System.Data.DataColumn("ref4amt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnref4amt)
            Me.columnref5des = New Global.System.Data.DataColumn("ref5des", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnref5des)
            Me.columnref5unit = New Global.System.Data.DataColumn("ref5unit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnref5unit)
            Me.columnref5rate = New Global.System.Data.DataColumn("ref5rate", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnref5rate)
            Me.columnref5amt = New Global.System.Data.DataColumn("ref5amt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnref5amt)
            Me.columnprog_Name = New Global.System.Data.DataColumn("prog_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprog_Name)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnrefNo}, true))
            Me.columnrefNo.AllowDBNull = false
            Me.columnrefNo.Unique = true
            Me.columnrefNo.MaxLength = 50
            Me.columnnameWork.MaxLength = 2147483647
            Me.columnnameBen.MaxLength = 250
            Me.columnlocationWork.MaxLength = 2147483647
            Me.columnnameIO.MaxLength = 250
            Me.columnnameSO.MaxLength = 250
            Me.columnnameEE.MaxLength = 250
            Me.columndurWork.MaxLength = 100
            Me.columnunit.MaxLength = 50
            Me.columndateEst.MaxLength = 50
            Me.columnfinYear.MaxLength = 50
            Me.columnrefno1.MaxLength = 50
            Me.columnrefno2.MaxLength = 50
            Me.columnrefno3.MaxLength = 50
            Me.columnrefno4.MaxLength = 50
            Me.columnrefno5.MaxLength = 50
            Me.columnrefNoEst.AllowDBNull = false
            Me.columnrefNoEst.MaxLength = 50
            Me.columnref1des.MaxLength = 2147483647
            Me.columnref1unit.MaxLength = 50
            Me.columnref2des.MaxLength = 2147483647
            Me.columnref2unit.MaxLength = 50
            Me.columnref3des.MaxLength = 2147483647
            Me.columnref3unit.MaxLength = 50
            Me.columnref4des.MaxLength = 2147483647
            Me.columnref4unit.MaxLength = 50
            Me.columnref5des.MaxLength = 2147483647
            Me.columnref5unit.MaxLength = 50
            Me.columnprog_Name.MaxLength = 250
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEstimate_pondRow() As Estimate_pondRow
            Return CType(Me.NewRow,Estimate_pondRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Estimate_pondRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Estimate_pondRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Estimate_pondRowChangedEvent) Is Nothing) Then
                RaiseEvent Estimate_pondRowChanged(Me, New Estimate_pondRowChangeEvent(CType(e.Row,Estimate_pondRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Estimate_pondRowChangingEvent) Is Nothing) Then
                RaiseEvent Estimate_pondRowChanging(Me, New Estimate_pondRowChangeEvent(CType(e.Row,Estimate_pondRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Estimate_pondRowDeletedEvent) Is Nothing) Then
                RaiseEvent Estimate_pondRowDeleted(Me, New Estimate_pondRowChangeEvent(CType(e.Row,Estimate_pondRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Estimate_pondRowDeletingEvent) Is Nothing) Then
                RaiseEvent Estimate_pondRowDeleting(Me, New Estimate_pondRowChangeEvent(CType(e.Row,Estimate_pondRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEstimate_pondRow(ByVal row As Estimate_pondRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Report_PondEstDataSet = New Report_PondEstDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Estimate_pondDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Estimate_pondRow
        Inherits Global.System.Data.DataRow
        
        Private tableEstimate_pond As Estimate_pondDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEstimate_pond = CType(Me.Table,Estimate_pondDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property refNo() As String
            Get
                Return CType(Me(Me.tableEstimate_pond.refNoColumn),String)
            End Get
            Set
                Me(Me.tableEstimate_pond.refNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nameWork() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.nameWorkColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nameWork' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.nameWorkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nameBen() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.nameBenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nameBen' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.nameBenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property locationWork() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.locationWorkColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'locationWork' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.locationWorkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nameIO() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.nameIOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nameIO' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.nameIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nameSO() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.nameSOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nameSO' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.nameSOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nameEE() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.nameEEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nameEE' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.nameEEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property durWork() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.durWorkColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'durWork' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.durWorkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tb() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.tbColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tb' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.tbColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property bb() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.bbColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bb' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.bbColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tl() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.tlColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tl' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.tlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property bl() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.blColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bl' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.blColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dp() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.dpColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'dp' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.dpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property slope() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.slopeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'slope' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.slopeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property vol() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.volColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'vol' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.volColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property unit() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.unitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'unit' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.unitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property estCost() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.estCostColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'estCost' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.estCostColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dispCost() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.dispCostColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'dispCost' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.dispCostColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property contRate() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.contRateColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'contRate' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.contRateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property contCost() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.contCostColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'contCost' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.contCostColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property totEstCost() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.totEstCostColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'totEstCost' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.totEstCostColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dateEst() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.dateEstColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'dateEst' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.dateEstColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property finYear() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.finYearColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'finYear' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.finYearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property totRateRef() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.totRateRefColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'totRateRef' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.totRateRefColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property refno1() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.refno1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'refno1' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.refno1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property refno2() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.refno2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'refno2' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.refno2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property refno3() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.refno3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'refno3' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.refno3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property refno4() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.refno4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'refno4' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.refno4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property refno5() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.refno5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'refno5' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.refno5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property qty1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.qty1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'qty1' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.qty1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property qty2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.qty2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'qty2' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.qty2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property qty3() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.qty3Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'qty3' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.qty3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property qty4() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.qty4Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'qty4' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.qty4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property qty5() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.qty5Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'qty5' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.qty5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property refNoEst() As String
            Get
                Return CType(Me(Me.tableEstimate_pond.refNoEstColumn),String)
            End Get
            Set
                Me(Me.tableEstimate_pond.refNoEstColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ref1des() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.ref1desColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ref1des' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.ref1desColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ref1unit() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.ref1unitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ref1unit' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.ref1unitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ref1rate() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.ref1rateColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ref1rate' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.ref1rateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ref1amt() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.ref1amtColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ref1amt' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.ref1amtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ref2des() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.ref2desColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ref2des' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.ref2desColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ref2unit() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.ref2unitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ref2unit' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.ref2unitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ref2rate() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.ref2rateColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ref2rate' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.ref2rateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ref2amt() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.ref2amtColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ref2amt' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.ref2amtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ref3des() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.ref3desColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ref3des' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.ref3desColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ref3unit() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.ref3unitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ref3unit' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.ref3unitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ref3rate() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.ref3rateColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ref3rate' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.ref3rateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ref3amt() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.ref3amtColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ref3amt' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.ref3amtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ref4des() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.ref4desColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ref4des' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.ref4desColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ref4unit() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.ref4unitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ref4unit' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.ref4unitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ref4rate() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.ref4rateColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ref4rate' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.ref4rateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ref4amt() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.ref4amtColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ref4amt' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.ref4amtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ref5des() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.ref5desColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ref5des' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.ref5desColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ref5unit() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.ref5unitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ref5unit' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.ref5unitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ref5rate() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.ref5rateColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ref5rate' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.ref5rateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ref5amt() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.ref5amtColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ref5amt' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.ref5amtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prog_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstimate_pond.prog_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'prog_Name' in table 'Estimate_pond' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimate_pond.prog_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnameWorkNull() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.nameWorkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnameWorkNull()
            Me(Me.tableEstimate_pond.nameWorkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnameBenNull() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.nameBenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnameBenNull()
            Me(Me.tableEstimate_pond.nameBenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslocationWorkNull() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.locationWorkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlocationWorkNull()
            Me(Me.tableEstimate_pond.locationWorkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnameIONull() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.nameIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnameIONull()
            Me(Me.tableEstimate_pond.nameIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnameSONull() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.nameSOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnameSONull()
            Me(Me.tableEstimate_pond.nameSOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnameEENull() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.nameEEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnameEENull()
            Me(Me.tableEstimate_pond.nameEEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdurWorkNull() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.durWorkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdurWorkNull()
            Me(Me.tableEstimate_pond.durWorkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstbNull() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.tbColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettbNull()
            Me(Me.tableEstimate_pond.tbColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsbbNull() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.bbColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetbbNull()
            Me(Me.tableEstimate_pond.bbColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstlNull() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.tlColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettlNull()
            Me(Me.tableEstimate_pond.tlColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsblNull() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.blColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetblNull()
            Me(Me.tableEstimate_pond.blColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdpNull() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.dpColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdpNull()
            Me(Me.tableEstimate_pond.dpColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsslopeNull() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.slopeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetslopeNull()
            Me(Me.tableEstimate_pond.slopeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsvolNull() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.volColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetvolNull()
            Me(Me.tableEstimate_pond.volColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsunitNull() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.unitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetunitNull()
            Me(Me.tableEstimate_pond.unitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsestCostNull() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.estCostColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetestCostNull()
            Me(Me.tableEstimate_pond.estCostColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdispCostNull() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.dispCostColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdispCostNull()
            Me(Me.tableEstimate_pond.dispCostColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscontRateNull() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.contRateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcontRateNull()
            Me(Me.tableEstimate_pond.contRateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscontCostNull() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.contCostColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcontCostNull()
            Me(Me.tableEstimate_pond.contCostColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstotEstCostNull() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.totEstCostColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettotEstCostNull()
            Me(Me.tableEstimate_pond.totEstCostColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdateEstNull() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.dateEstColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdateEstNull()
            Me(Me.tableEstimate_pond.dateEstColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfinYearNull() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.finYearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfinYearNull()
            Me(Me.tableEstimate_pond.finYearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstotRateRefNull() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.totRateRefColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettotRateRefNull()
            Me(Me.tableEstimate_pond.totRateRefColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isrefno1Null() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.refno1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setrefno1Null()
            Me(Me.tableEstimate_pond.refno1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isrefno2Null() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.refno2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setrefno2Null()
            Me(Me.tableEstimate_pond.refno2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isrefno3Null() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.refno3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setrefno3Null()
            Me(Me.tableEstimate_pond.refno3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isrefno4Null() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.refno4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setrefno4Null()
            Me(Me.tableEstimate_pond.refno4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isrefno5Null() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.refno5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setrefno5Null()
            Me(Me.tableEstimate_pond.refno5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isqty1Null() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.qty1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setqty1Null()
            Me(Me.tableEstimate_pond.qty1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isqty2Null() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.qty2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setqty2Null()
            Me(Me.tableEstimate_pond.qty2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isqty3Null() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.qty3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setqty3Null()
            Me(Me.tableEstimate_pond.qty3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isqty4Null() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.qty4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setqty4Null()
            Me(Me.tableEstimate_pond.qty4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isqty5Null() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.qty5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setqty5Null()
            Me(Me.tableEstimate_pond.qty5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isref1desNull() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.ref1desColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setref1desNull()
            Me(Me.tableEstimate_pond.ref1desColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isref1unitNull() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.ref1unitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setref1unitNull()
            Me(Me.tableEstimate_pond.ref1unitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isref1rateNull() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.ref1rateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setref1rateNull()
            Me(Me.tableEstimate_pond.ref1rateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isref1amtNull() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.ref1amtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setref1amtNull()
            Me(Me.tableEstimate_pond.ref1amtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isref2desNull() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.ref2desColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setref2desNull()
            Me(Me.tableEstimate_pond.ref2desColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isref2unitNull() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.ref2unitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setref2unitNull()
            Me(Me.tableEstimate_pond.ref2unitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isref2rateNull() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.ref2rateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setref2rateNull()
            Me(Me.tableEstimate_pond.ref2rateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isref2amtNull() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.ref2amtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setref2amtNull()
            Me(Me.tableEstimate_pond.ref2amtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isref3desNull() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.ref3desColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setref3desNull()
            Me(Me.tableEstimate_pond.ref3desColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isref3unitNull() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.ref3unitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setref3unitNull()
            Me(Me.tableEstimate_pond.ref3unitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isref3rateNull() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.ref3rateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setref3rateNull()
            Me(Me.tableEstimate_pond.ref3rateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isref3amtNull() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.ref3amtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setref3amtNull()
            Me(Me.tableEstimate_pond.ref3amtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isref4desNull() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.ref4desColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setref4desNull()
            Me(Me.tableEstimate_pond.ref4desColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isref4unitNull() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.ref4unitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setref4unitNull()
            Me(Me.tableEstimate_pond.ref4unitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isref4rateNull() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.ref4rateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setref4rateNull()
            Me(Me.tableEstimate_pond.ref4rateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isref4amtNull() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.ref4amtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setref4amtNull()
            Me(Me.tableEstimate_pond.ref4amtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isref5desNull() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.ref5desColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setref5desNull()
            Me(Me.tableEstimate_pond.ref5desColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isref5unitNull() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.ref5unitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setref5unitNull()
            Me(Me.tableEstimate_pond.ref5unitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isref5rateNull() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.ref5rateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setref5rateNull()
            Me(Me.tableEstimate_pond.ref5rateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isref5amtNull() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.ref5amtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setref5amtNull()
            Me(Me.tableEstimate_pond.ref5amtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isprog_NameNull() As Boolean
            Return Me.IsNull(Me.tableEstimate_pond.prog_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setprog_NameNull()
            Me(Me.tableEstimate_pond.prog_NameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Estimate_pondRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Estimate_pondRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Estimate_pondRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Estimate_pondRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace Report_PondEstDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Estimate_pondTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Estimate_pond"
            tableMapping.ColumnMappings.Add("refNo", "refNo")
            tableMapping.ColumnMappings.Add("nameWork", "nameWork")
            tableMapping.ColumnMappings.Add("nameBen", "nameBen")
            tableMapping.ColumnMappings.Add("locationWork", "locationWork")
            tableMapping.ColumnMappings.Add("nameIO", "nameIO")
            tableMapping.ColumnMappings.Add("nameSO", "nameSO")
            tableMapping.ColumnMappings.Add("nameEE", "nameEE")
            tableMapping.ColumnMappings.Add("durWork", "durWork")
            tableMapping.ColumnMappings.Add("tb", "tb")
            tableMapping.ColumnMappings.Add("bb", "bb")
            tableMapping.ColumnMappings.Add("tl", "tl")
            tableMapping.ColumnMappings.Add("bl", "bl")
            tableMapping.ColumnMappings.Add("dp", "dp")
            tableMapping.ColumnMappings.Add("vol", "vol")
            tableMapping.ColumnMappings.Add("unit", "unit")
            tableMapping.ColumnMappings.Add("estCost", "estCost")
            tableMapping.ColumnMappings.Add("dispCost", "dispCost")
            tableMapping.ColumnMappings.Add("contRate", "contRate")
            tableMapping.ColumnMappings.Add("contCost", "contCost")
            tableMapping.ColumnMappings.Add("totEstCost", "totEstCost")
            tableMapping.ColumnMappings.Add("dateEst", "dateEst")
            tableMapping.ColumnMappings.Add("finYear", "finYear")
            tableMapping.ColumnMappings.Add("totRateRef", "totRateRef")
            tableMapping.ColumnMappings.Add("refno1", "refno1")
            tableMapping.ColumnMappings.Add("refno2", "refno2")
            tableMapping.ColumnMappings.Add("refno3", "refno3")
            tableMapping.ColumnMappings.Add("refno4", "refno4")
            tableMapping.ColumnMappings.Add("refno5", "refno5")
            tableMapping.ColumnMappings.Add("qty1", "qty1")
            tableMapping.ColumnMappings.Add("qty2", "qty2")
            tableMapping.ColumnMappings.Add("qty3", "qty3")
            tableMapping.ColumnMappings.Add("qty4", "qty4")
            tableMapping.ColumnMappings.Add("qty5", "qty5")
            tableMapping.ColumnMappings.Add("refNoEst", "refNoEst")
            tableMapping.ColumnMappings.Add("ref1des", "ref1des")
            tableMapping.ColumnMappings.Add("ref1unit", "ref1unit")
            tableMapping.ColumnMappings.Add("ref1rate", "ref1rate")
            tableMapping.ColumnMappings.Add("ref1amt", "ref1amt")
            tableMapping.ColumnMappings.Add("ref2des", "ref2des")
            tableMapping.ColumnMappings.Add("ref2unit", "ref2unit")
            tableMapping.ColumnMappings.Add("ref2rate", "ref2rate")
            tableMapping.ColumnMappings.Add("ref2amt", "ref2amt")
            tableMapping.ColumnMappings.Add("ref3des", "ref3des")
            tableMapping.ColumnMappings.Add("ref3unit", "ref3unit")
            tableMapping.ColumnMappings.Add("ref3rate", "ref3rate")
            tableMapping.ColumnMappings.Add("ref3amt", "ref3amt")
            tableMapping.ColumnMappings.Add("ref4des", "ref4des")
            tableMapping.ColumnMappings.Add("ref4unit", "ref4unit")
            tableMapping.ColumnMappings.Add("ref4rate", "ref4rate")
            tableMapping.ColumnMappings.Add("ref4amt", "ref4amt")
            tableMapping.ColumnMappings.Add("ref5des", "ref5des")
            tableMapping.ColumnMappings.Add("ref5unit", "ref5unit")
            tableMapping.ColumnMappings.Add("ref5rate", "ref5rate")
            tableMapping.ColumnMappings.Add("ref5amt", "ref5amt")
            tableMapping.ColumnMappings.Add("slope", "slope")
            tableMapping.ColumnMappings.Add("prog_Name", "prog_Name")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.EstimatePro_v2.My.MySettings.Default.KVKDhalai_EstimateConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        Estimate_reservoir.refNo, Estimate_reservoir.dateEst, Estimate_rese"& _ 
                "rvoir.nameWork, Estimate_reservoir.nameBen, Estimate_reservoir.locationWork, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" "& _ 
                "                        Estimate_reservoir.finYear, Estimate_reservoir.nameIO, E"& _ 
                "stimate_reservoir.nameSO, Estimate_reservoir.nameEE, Estimate_reservoir.durWork,"& _ 
                " "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Estimate_reservoir.tb, Estimate_reservoir.bb, Estima"& _ 
                "te_reservoir.tl, Estimate_reservoir.bl, Estimate_reservoir.dp, Estimate_reservoi"& _ 
                "r.slope, Estimate_reservoir.vol, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Estimate_reservoir.u"& _ 
                "nit, Estimate_reservoir.totRateRef, Estimate_reservoir.refno1, Estimate_reservoi"& _ 
                "r.refno2, Estimate_reservoir.refno3, Estimate_reservoir.refno4, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"              "& _ 
                "           Estimate_reservoir.refno5, Estimate_reservoir.qty1, Estimate_reservoi"& _ 
                "r.qty2, Estimate_reservoir.qty3, Estimate_reservoir.qty4, Estimate_reservoir.qty"& _ 
                "5, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Estimate_reservoir.estCost, Estimate_reservoir.dis"& _ 
                "pCost, Estimate_reservoir.contRate, Estimate_reservoir.contCost, Estimate_reserv"& _ 
                "oir.totEstCost, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Estimate_reservoirRate.refNoEst, Esti"& _ 
                "mate_reservoirRate.ref1des, Estimate_reservoirRate.ref1unit, Estimate_reservoirR"& _ 
                "ate.ref1rate, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Estimate_reservoirRate.ref1amt, Estimat"& _ 
                "e_reservoirRate.ref2des, Estimate_reservoirRate.ref2unit, Estimate_reservoirRate"& _ 
                ".ref2rate, Estimate_reservoirRate.ref2amt,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                          Estimate_r"& _ 
                "eservoirRate.ref3des, Estimate_reservoirRate.ref3unit, Estimate_reservoirRate.re"& _ 
                "f3rate, Estimate_reservoirRate.ref3amt, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Estimate_rese"& _ 
                "rvoirRate.ref4des, Estimate_reservoirRate.ref4unit, Estimate_reservoirRate.ref4r"& _ 
                "ate, Estimate_reservoirRate.ref4amt, Estimate_reservoirRate.ref5des,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"          "& _ 
                "                Estimate_reservoirRate.ref5unit, Estimate_reservoirRate.ref5rate"& _ 
                ", Estimate_reservoirRate.ref5amt, Estimate_reservoir.prog_Name"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            "& _ 
                "Estimate_reservoir INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Estimate_reservoirRate O"& _ 
                "N Estimate_reservoir.refNo = Estimate_reservoirRate.refNoEst"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (Esti"& _ 
                "mate_reservoir.refNo = @refNo)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@refNo", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "refNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Report_PondEstDataSet.Estimate_pondDataTable, ByVal refNo As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (refNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("refNo")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(refNo,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal refNo As String) As Report_PondEstDataSet.Estimate_pondDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (refNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("refNo")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(refNo,String)
            End If
            Dim dataTable As Report_PondEstDataSet.Estimate_pondDataTable = New Report_PondEstDataSet.Estimate_pondDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As Report_PondEstDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As Report_PondEstDataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As Report_PondEstDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As Report_PondEstDataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
